/*
 * Complete the 'find_shortest_distance_from_a_guard' function below.
 *
 * The function accepts the 2D CHARACTER ARRAY.
 * Returns 2D INTEGER ARRAY.
 */
 struct Node {
     int x;
     int y;
     int dist;
 };
 bool isvalid(int i,int j, int m,int n) {
     if(i >=0 && i < m && j >= 0 && j < n  ) return true;
     return false;
 }
 bool issafe(vector<vector<char>> grid,int i ,int j, vector<vector<int>> res) {

     if(grid[i][j] == 'G' || grid[i][j]  == 'W' || res[i][j] >= 0) return false;
     return true;
 }
vector<vector<int>> find_shortest_distance_from_a_guard(vector<vector<char>> grid) {
   int m = grid.size();
   int n = grid[0].size();
   vector<vector<int>> res(m,vector<int>(n, -1));
  
   queue<Node> q;
   vector<pair<int, int>> dir = {{1,0},{0,1},{-1,0},{0,-1}};
   for(int i = 0; i <m; i++ ) {
       for(int j = 0; j< n; j++) {
           if(grid[i][j] == 'G') {
               q.push({i,j,0});
               res[i][j] = 0;
           } else {
               res[i][j] = -1;
           }
       }
   }
   while(!q.empty()){
       Node node= q.front();
       q.pop();
       int dist = node.dist;
       int x = node.x;
       int y = node.y;
       
       for(auto d: dir) {
           int nx = x + d.first;
           int ny = y + d.second;
          //if(isvalid(nx,ny,m,n) && issafe(grid,nx,nx,res)) {
          if(nx >= 0 && nx < m && ny >= 0 && ny < n  && 
          res[nx][ny] == -1 && grid[nx][ny] != 'W'){
               //cout << nx << endl;
               //cout << ny << endl;
               res[nx][ny] = dist +1;
               q.push({nx,ny, dist+1});
           }
           
       }
       
   }
   return res;
   
   
}

